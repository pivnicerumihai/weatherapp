{"version":3,"sources":["components/Header.jsx","components/WeatherData.jsx","components/Form.jsx","components/City.jsx","components/WeatherContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","WeatherData","props","imgSrc","weather","Box","display","justifyContent","degree","Number","String","src","description","Form","onSubmit","click","required","placeholder","Button","style","marginTop","type","variant","color","City","children","WeatherContainer","useState","apiResponse","setApiResponse","city","setCity","Container","charAt","toUpperCase","slice","e","preventDefault","location","target","value","axios","get","then","res","Math","round","data","main","temp","catch","error","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+OAUeA,MARf,WACI,OACI,4BAAQC,UAAU,UACd,oD,wBCoCGC,EAtCK,SAACC,GAErB,IAAIC,EAEJ,OAAOD,EAAME,SACT,IAAK,eACDD,EAAS,8CACT,MACJ,IAAK,UACDA,EAAS,8CACT,MACJ,IAAK,OACDA,EAAS,8CACT,MACJ,IAAK,OACDA,EAAS,8CACT,MACJ,IAAK,QACDA,EAAS,8CACT,MACJ,IAAK,SACDA,EAAO,8CACP,MACJ,IAAK,OACDA,EAAO,8CACP,MACJ,QACIA,EAAO,KAEX,OACI,kBAACE,EAAA,EAAD,CAAKL,UAAU,MAAMM,QAAQ,OAAOC,eAAe,gBAC/C,kBAACF,EAAA,EAAD,KAAMH,EAAMM,SAAWC,OAAS,KAAO,2BAAG,sCAAH,IAAkB,6BAAlB,IAAyBP,EAAMM,OAA/B,WAC/C,kBAACH,EAAA,EAAD,KAAOH,EAAME,UAAYM,OAAS,KAAM,2BAAG,uCAAH,IAAmB,6BAAnB,IAA0BR,EAAME,QAAhC,IAAyC,6BAAzC,IAA+C,yBAAKO,IAAG,UAAKR,OACpG,kBAACE,EAAA,EAAD,KAAOH,EAAMU,cAAgBF,OAAU,KAAO,2BAAG,2CAAH,IAAuB,6BAAOR,EAAMU,gB,QCbvEC,EApBF,SAAAX,GAET,OACI,0BAAMY,SAAUZ,EAAMa,OAClB,2BACIf,UAAU,QACVgB,UAAQ,EACRC,YAAY,wBAChB,6BACA,kBAACC,EAAA,EAAD,CACIC,MAAO,CAAEC,UAAW,OACpBC,KAAK,SACLC,QAAQ,YACRC,MAAM,WAJV,0BCJGC,EANF,SAACtB,GACV,OACI,uBAAGF,UAAU,QAAQE,EAAMuB,W,iBCmDpBC,EAhDU,SAACxB,GAAW,IAAD,EAEMyB,mBAAS,CAC3CnB,OAAQC,OACRL,QAASM,OACTE,YAAaF,SALe,mBAEzBkB,EAFyB,KAEZC,EAFY,OAQRF,mBAAS,MARD,mBAQzBG,EARyB,KAQnBC,EARmB,KAgChC,OACI,kBAACC,EAAA,EAAD,CAAWhC,UAAU,aACjB,kBAAC,EAAD,KAAgB,OAAT8B,EAAgB,KAAOA,EAAKG,OAAO,GAAGC,cAAgBJ,EAAKK,MAAM,IAExE,kBAAC,EAAD,CACI3B,OAAQoB,EAAYpB,OACpBJ,QAASwB,EAAYxB,QACrBQ,YAAagB,EAAYhB,cAC7B,kBAAC,EAAD,CACIG,MA9BS,SAACqB,GAClBA,EAAEC,iBACF,IAAMC,EAAWF,EAAEG,OAAOd,SAAS,GAAGe,MAEtCC,IAAMC,IAAN,+FAAkGJ,EAAlG,4CACKK,MAAK,SAAAC,GAAG,OAAIf,EAAe,CACxBrB,OAAkD,GAA1CqC,KAAKC,MAAMF,EAAIG,KAAKC,KAAKC,KAAO,QAAe,GACvD7C,QAASwC,EAAIG,KAAK3C,QAAQ,GAAG4C,KAC7BpC,YAAagC,EAAIG,KAAK3C,QAAQ,GAAGQ,iBAEpC+B,KAAKZ,EAAQO,EAAW,aACxBY,OAAM,SAACC,GACAA,GACApB,EAAQ,iDCdbqB,MAZf,WAIE,OACE,yBAAKpD,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAcqD,QACW,cAA7BC,OAAOhB,SAASiB,UAEe,UAA7BD,OAAOhB,SAASiB,UAEhBD,OAAOhB,SAASiB,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.8260ef3a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header() {\r\n    return (\r\n        <header className=\"header\">\r\n            <h3>Simple Weather App</h3>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport Box from \"@material-ui/core/Box\"\r\n\r\nconst WeatherData = (props) => {\r\n\r\nlet imgSrc ;\r\n\r\nswitch(props.weather){\r\n    case \"Thunderstorm\":\r\n        imgSrc = \"http://openweathermap.org/img/wn/11d@2x.png\"\r\n        break;\r\n    case \"Drizzle\":\r\n        imgSrc = \"http://openweathermap.org/img/wn/09d@2x.png\"\r\n        break;\r\n    case \"Rain\":\r\n        imgSrc = \"http://openweathermap.org/img/wn/10d@2x.png\"\r\n        break;\r\n    case \"Snow\":\r\n        imgSrc = \"http://openweathermap.org/img/wn/13d@2x.png\"\r\n        break;\r\n    case \"Clear\":\r\n        imgSrc = \"http://openweathermap.org/img/wn/01d@2x.png\"\r\n        break;\r\n    case \"Clouds\":\r\n        imgSrc=\"http://openweathermap.org/img/wn/02d@2x.png\"\r\n        break;\r\n    case \"Mist\":\r\n        imgSrc=\"http://openweathermap.org/img/wn/50d@2x.png\"\r\n        break;\r\n    default:\r\n        imgSrc=null;\r\n    }\r\n    return (\r\n        <Box className=\"box\" display=\"flex\" justifyContent=\"space-around\">\r\n            <Box>{props.degree === Number ? null : <p><b>Degree:</b> <br/> {props.degree} &deg;C</p>}</Box>\r\n    <Box >{props.weather === String ? null: <p><b>Weather:</b> <br/> {props.weather} <br/> <img src={`${imgSrc}`}/></p> }</Box>\r\n    <Box >{props.description === String ?  null : <p><b>Description:</b> <br/>{ props.description }</p>}</Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default WeatherData;","import React from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nconst Form = props => {\r\n\r\n    return (\r\n        <form onSubmit={props.click}>\r\n            <input\r\n                className=\"input\"\r\n                required\r\n                placeholder=\"Enter location here\" />\r\n            <br />\r\n            <Button\r\n                style={{ marginTop: \"10%\" }}\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\">\r\n                Get Location Weather\r\n            </Button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst City = (props) =>{\r\n    return(\r\n        <p className=\"city\">{props.children}</p >\r\n    )\r\n}\r\n\r\nexport default City;","import React, { useState } from \"react\";\r\nimport Container from \"@material-ui/core/Container\"\r\nimport WeatherData from \"./WeatherData\"\r\nimport Form from \"./Form\"\r\nimport City from \"./City\"\r\nimport axios from \"axios\";\r\n\r\nconst WeatherContainer = (props) => {\r\n\r\n    const [apiResponse, setApiResponse] = useState({\r\n        degree: Number,\r\n        weather: String,\r\n        description: String\r\n    });\r\n\r\n    const [city, setCity] = useState(null);\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const location = e.target.children[0].value;\r\n\r\n        axios.get(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=${location}&appid=be8b00b8613ea0e37b4d865a3f5b1d33`)\r\n            .then(res => setApiResponse({\r\n                degree: Math.round(res.data.main.temp - 273.15) * 10 / 10,\r\n                weather: res.data.weather[0].main,\r\n                description: res.data.weather[0].description\r\n            }))\r\n            .then(setCity(location + \" Weather\"))\r\n            .catch((error) => {\r\n                if (error) {\r\n                    setCity(\"City does not exist. Please Try Again\")\r\n                }\r\n            })\r\n\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <Container className=\"container\">\r\n            <City>{city === null ? null : city.charAt(0).toUpperCase() + city.slice(1)}</City>\r\n\r\n            <WeatherData\r\n                degree={apiResponse.degree}\r\n                weather={apiResponse.weather}\r\n                description={apiResponse.description} />\r\n            <Form\r\n                click={handleSubmit}\r\n            />\r\n        </Container>\r\n    )\r\n\r\n}\r\n\r\nexport default WeatherContainer;","import React from 'react';\nimport Header from \"../src/components/Header\"\nimport \"./App.css\"\nimport WeatherContainer from \"./components/WeatherContainer\"\n\nfunction App() {\n\n   \n  \n  return (\n    <div className=\"App\">\n      <Header/>\n      <WeatherContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"./App.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}